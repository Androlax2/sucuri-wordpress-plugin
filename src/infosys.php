<?php

/**
 * Generate and print the HTML code for the InfoSys page.
 *
 * This page will contains information of the system where the site is hosted,
 * also information about users in session, htaccess rules and configuration
 * options.
 *
 * @return void
 */
function sucuriscan_infosys_page()
{
    SucuriScanInterface::check_permissions();

    // Process all form submissions.
    sucuriscan_infosys_form_submissions();

    // Page pseudo-variables initialization.
    $params = array(
        'PageTitle' => 'Site Info',
        'ServerInfo' => sucuriscan_server_info(),
        'Cronjobs' => sucuriscan_show_cronjobs(),
        'HTAccessIntegrity' => sucuriscan_infosys_htaccess(),
        'WordpressConfig' => sucuriscan_infosys_wpconfig(),
        'ErrorLogs' => sucuriscan_infosys_errorlogs(),
    );

    echo SucuriScanTemplate::getTemplate('infosys', $params);
}

/**
 * Handle an Ajax request for this specific page.
 *
 * @return mixed.
 */
function sucuriscan_infosys_ajax()
{
    SucuriScanInterface::check_permissions();

    if (SucuriScanInterface::check_nonce()) {
        sucuriscan_infosys_errorlogs_ajax();
    }

    wp_die();
}

/**
 * Find the main htaccess file for the site and check whether the rules of the
 * main htaccess file of the site are the default rules generated by WordPress.
 *
 * @return string The HTML code displaying the information about the HTAccess rules.
 */
function sucuriscan_infosys_htaccess()
{
    $htaccess_path = SucuriScan::get_htaccess_path();
    $params = array(
        'HTAccess.Content' => '',
        'HTAccess.TextareaVisible' => 'hidden',
        'HTAccess.StandardVisible' => 'hidden',
        'HTAccess.NotFoundVisible' => 'hidden',
        'HTAccess.FoundVisible' => 'hidden',
        'HTAccess.Fpath' => 'unknown',
    );

    if ($htaccess_path) {
        $htaccess_rules = @file_get_contents($htaccess_path);

        $params['HTAccess.TextareaVisible'] = 'visible';
        $params['HTAccess.Content'] = $htaccess_rules;
        $params['HTAccess.Fpath'] = $htaccess_path;
        $params['HTAccess.FoundVisible'] = 'visible';

        if (sucuriscan_htaccess_is_standard($htaccess_rules)) {
            $params['HTAccess.StandardVisible'] = 'visible';
        }
    } else {
        $params['HTAccess.NotFoundVisible'] = 'visible';
    }

    return SucuriScanTemplate::getSection('infosys-htaccess', $params);
}

/**
 * Check if the standard rules for a normal WordPress installation (not network
 * based) are inside the main htaccess file. This only applies to websites that
 * have permalinks enabled, or 3rd-party plugins that require custom rules
 * (generally based on mod_deflate) to compress and/or generate static files for
 * cache.
 *
 * @param  string  $rules Content of the main htaccess file.
 * @return boolean        True if the htaccess has the standard rules, false otherwise.
 */
function sucuriscan_htaccess_is_standard($rules = false)
{
    if ($rules === false) {
        $rules = '';
        $htaccess_path = SucuriScan::get_htaccess_path();

        if ($htaccess_path) {
            $rules = @file_get_contents($htaccess_path);
        }
    }

    if (class_exists('WP_Rewrite')
        && is_string($rules)
        && !empty($rules)
    ) {
        $rewrite = new WP_Rewrite();
        $standard = $rewrite->mod_rewrite_rules();

        if (!empty($standard)) {
            return (bool) (strpos($rules, $standard) !== false);
        }
    }

    return false;
}

/**
 * Retrieve all the constants and variables with their respective values defined
 * in the WordPress configuration file, only the database password constant is
 * omitted for security reasons.
 *
 * @return string The HTML code displaying the constants and variables found in the wp-config file.
 */
function sucuriscan_infosys_wpconfig()
{
    $params = array(
        'WordpressConfig.Rules' => '',
        'WordpressConfig.Total' => 0,
    );

    $ignore_wp_rules = array('DB_PASSWORD');
    $wp_config_path = SucuriScan::get_wpconfig_path();

    if ($wp_config_path) {
        $wp_config_rules = array();
        $wp_config_content = SucuriScanFileInfo::file_lines($wp_config_path);

        // Parse the main configuration file and look for constants and global variables.
        foreach ((array) $wp_config_content as $line) {
            if (@preg_match('/^\s?(#|\/\/)/', $line)) {
                continue; /* Ignore commented lines. */
            } elseif (@preg_match('/define\(/', $line)) {
                // Detect PHP constants even if the line if indented.
                $line = preg_replace('/.*define\((.+)\);.*/', '$1', $line);
                $line_parts = explode(',', $line, 2);
            } elseif (@preg_match('/^\$[a-zA-Z_]+/', $line)) {
                // Detect global variables like the database table prefix.
                $line = @preg_replace('/;\s\/\/.*/', ';', $line);
                $line_parts = explode('=', $line, 2);
            } else {
                continue; /* Ignore other lines. */
            }

            // Clean and append the rule to the wp_config_rules variable.
            if (isset($line_parts) && count($line_parts) === 2) {
                $key_name = '';
                $key_value = '';

                // TODO: A foreach loop is not really necessary, find a better way.
                foreach ($line_parts as $i => $line_part) {
                    $line_part = trim($line_part);
                    $line_part = ltrim($line_part, '$');
                    $line_part = rtrim($line_part, ';');

                    // Remove single/double quotes at the beginning and end of the string.
                    $line_part = ltrim($line_part, "'");
                    $line_part = rtrim($line_part, "'");
                    $line_part = ltrim($line_part, '"');
                    $line_part = rtrim($line_part, '"');

                    // Assign the clean strings to specific variables.
                    if ($i == 0) {
                        $key_name = $line_part;
                    }

                    if ($i == 1) {
                        if (defined($key_name)) {
                            $key_value = constant($key_name);

                            if (is_bool($key_value)) {
                                $key_value = ($key_value === true) ? 'True' : 'False';
                            }
                        } else {
                            $key_value = $line_part;
                        }
                    }
                }

                // Remove the value of sensitive variables like the database password.
                if (in_array($key_name, $ignore_wp_rules)) {
                    $key_value = 'hidden';
                }

                // Append the value to the configuration rules.
                $wp_config_rules[$key_name] = $key_value;
            }
        }

        // Pass the WordPress configuration rules to the template and show them.
        $counter = 0;
        foreach ($wp_config_rules as $var_name => $var_value) {
            $css_class = ($counter % 2 === 0) ? '' : 'alternate';
            $label_css = 'sucuriscan-monospace';

            if (empty($var_value)) {
                $var_value = 'empty';
                $label_css = 'sucuriscan-label-default';
            } elseif ($var_value == 'hidden') {
                $label_css = 'sucuriscan-label-info';
            }

            $params['WordpressConfig.Total'] += 1;
            $params['WordpressConfig.Rules'] .= SucuriScanTemplate::getSnippet(
                'infosys-wpconfig',
                array(
                    'WordpressConfig.VariableName' => $var_name,
                    'WordpressConfig.VariableValue' => $var_value,
                    'WordpressConfig.VariableCssClass' => $label_css,
                    'WordpressConfig.CssClass' => $css_class,
                )
            );
            $counter++;
        }
    }

    return SucuriScanTemplate::getSection('infosys-wpconfig', $params);
}

/**
 * Retrieve a list with the scheduled tasks configured for the site.
 *
 * @return array A list of pseudo-variables and values that will replace them in the HTML template.
 */
function sucuriscan_show_cronjobs()
{
    $params = array(
        'Cronjobs.List' => '',
        'Cronjobs.Total' => 0,
    );

    $cronjobs = _get_cron_array();
    $counter = 0;

    foreach ($cronjobs as $timestamp => $cronhooks) {
        foreach ((array) $cronhooks as $hook => $events) {
            foreach ((array) $events as $key => $event) {
                if (empty($event['args'])) {
                    $event['args'] = array('[]');
                }

                $params['Cronjobs.Total'] += 1;
                $params['Cronjobs.List'] .= SucuriScanTemplate::getSnippet(
                    'infosys-cronjobs',
                    array(
                        'Cronjob.Hook' => $hook,
                        'Cronjob.Schedule' => $event['schedule'],
                        'Cronjob.NextTime' => SucuriScan::datetime($timestamp),
                        'Cronjob.Arguments' => SucuriScan::implode(', ', $event['args']),
                        'Cronjob.CssClass' => ($counter % 2 === 0) ? '' : 'alternate',
                    )
                );
                $counter++;
            }
        }
    }

    return SucuriScanTemplate::getSection('infosys-cronjobs', $params);
}

/**
 * Process the requests sent by the form submissions originated in the infosys
 * page, all forms must have a nonce field that will be checked against the one
 * generated in the template render function.
 *
 * @param  boolean $page_nonce True if the nonce is valid, False otherwise.
 * @return void
 */
function sucuriscan_infosys_form_submissions()
{
    if (SucuriScanInterface::check_nonce()) {
        // Modify the scheduled tasks (run now, remove, re-schedule).
        $allowed_actions = '(runnow|hourly|twicedaily|daily|remove)';

        if ($cronjob_action = SucuriScanRequest::post(':cronjob_action', $allowed_actions)) {
            $cronjobs = SucuriScanRequest::post(':cronjobs', '_array');

            if (!empty($cronjobs)) {
                $total_tasks = count($cronjobs);

                // Force execution of the selected scheduled tasks.
                if ($cronjob_action == 'runnow') {
                    SucuriScanInterface::info($total_tasks . ' tasks were scheduled to run in the next ten seconds.');
                    SucuriScanEvent::report_notice_event(sprintf(
                        'Force execution of scheduled tasks: (multiple entries): %s',
                        @implode(',', $cronjobs)
                    ));

                    foreach ($cronjobs as $task_name) {
                        wp_schedule_single_event(time() + 10, $task_name);
                    }
                } // Force deletion of the selected scheduled tasks.
                elseif ($cronjob_action == 'remove') {
                    SucuriScanInterface::info($total_tasks . ' scheduled tasks were removed.');
                    SucuriScanEvent::report_notice_event(sprintf(
                        'Delete scheduled tasks: (multiple entries): %s',
                        @implode(',', $cronjobs)
                    ));

                    foreach ($cronjobs as $task_name) {
                        wp_clear_scheduled_hook($task_name);
                    }
                } // Re-schedule the selected scheduled tasks.
                elseif ($cronjob_action == 'hourly'
                    || $cronjob_action == 'twicedaily'
                    || $cronjob_action == 'daily'
                ) {
                    SucuriScanInterface::info($total_tasks . ' tasks were re-scheduled to run <code>' . $cronjob_action . '</code>.');
                    SucuriScanEvent::report_notice_event(sprintf(
                        'Re-configure scheduled tasks %s: (multiple entries): %s',
                        $cronjob_action,
                        @implode(',', $cronjobs)
                    ));

                    foreach ($cronjobs as $task_name) {
                        $next_due = wp_next_scheduled($task_name);
                        wp_schedule_event($next_due, $cronjob_action, $task_name);
                    }
                }
            } else {
                SucuriScanInterface::error('No scheduled tasks were selected from the list.');
            }
        }
    }
}

/**
 * Locate, parse and display the latest error logged in the main error_log file.
 *
 * @return array A list of pseudo-variables and values that will replace them in the HTML template.
 */
function sucuriscan_infosys_errorlogs()
{
    $params = array();
    $nonce = SucuriScanInterface::check_nonce();

    $params['ErrorLogs.Status'] = sucuriscan_infosys_errorlogs_status($nonce);
    $params['ErrorLogs.FileLimit'] = sucuriscan_infosys_errorlogs_flimit($nonce);
    $params['ErrorLogs.FileReader'] = sucuriscan_infosys_errorlogs_freader();

    return SucuriScanTemplate::getSection('infosys-errorlogs', $params);
}

function sucuriscan_infosys_errorlogs_status($nonce)
{
    $params = array();
    $params['ErrorLogs.Status'] = 'Disabled';
    $params['ErrorLogs.SwitchText'] = 'Enable';
    $params['ErrorLogs.SwitchValue'] = 'enable';
    $params['ErrorLogs.SwitchCssClass'] = 'button-success';

    if ($nonce) {
        // Enable or disable the error logs parsing.
        if ($errorlogs = SucuriScanRequest::post(':parse_errorlogs', '(en|dis)able')) {
            $action_d = $errorlogs . 'd';
            $message = 'Analysis of the error log file was <code>' . $action_d . '</code>';

            SucuriScanOption::update_option(':parse_errorlogs', $action_d);
            SucuriScanEvent::report_auto_event($message);
            SucuriScanEvent::notify_event('plugin_change', $message);
            SucuriScanInterface::info($message);
        }
    }

    if (SucuriScanOption::is_enabled(':parse_errorlogs')) {
        $params['ErrorLogs.Status'] = 'Enabled';
        $params['ErrorLogs.SwitchText'] = 'Disable';
        $params['ErrorLogs.SwitchValue'] = 'disable';
        $params['ErrorLogs.SwitchCssClass'] = 'button-danger';
    }

    return SucuriScanTemplate::getSection('infosys-errorlogs-status', $params);
}

function sucuriscan_infosys_errorlogs_flimit($nonce)
{
    $params = array();

    if ($nonce) {
        // Update the limit of error log lines to parse.
        if ($limit = SucuriScanRequest::post(':errorlogs_limit', '[0-9]+')) {
            $message = 'Error logs file limit set to <code>' . $limit . '</code> lines.';

            SucuriScanOption::update_option(':errorlogs_limit', $limit);
            SucuriScanEvent::report_auto_event($message);
            SucuriScanEvent::notify_event('plugin_change', $message);
            SucuriScanInterface::info($message);
        }
    }

    $params['ErrorLogs.LogsLimit'] = SucuriScanOption::get_option(':errorlogs_limit');

    return SucuriScanTemplate::getSection('infosys-errorlogs-flimit', $params);
}

function sucuriscan_infosys_errorlogs_freader()
{
    $params = array();

    return SucuriScanTemplate::getSection('infosys-errorlogs-freader', $params);
}

function sucuriscan_infosys_errorlogs_ajax()
{
    if (SucuriScanRequest::post('form_action') == 'get_error_logs') {
        $response = '';

        // Scan the project and get the ignored paths.
        if (SucuriScanOption::is_enabled(':parse_errorlogs')) {
            $fname = SucuriScan::ini_get('error_log');
            $fpath = $fname ? @realpath(ABSPATH . '/' . $fname) : false;

            if ($fpath !== false
                && is_file($fpath)
                && file_exists($fpath)
                && is_readable($fpath)
            ) {
                $limit = SucuriScanOption::get_option(':errorlogs_limit');
                $flines = SucuriScanFileInfo::tail_file($fpath, $limit);
                $error_logs = SucuriScanFSScanner::parse_error_logs($flines);
                $error_logs = array_reverse($error_logs);
                $counter = 0;

                foreach ($error_logs as $log) {
                    $css_class = ($counter % 2 === 0) ? '' : 'alternate';
                    $response .= SucuriScanTemplate::getSnippet(
                        'infosys-errorlogs',
                        array(
                            'ErrorLog.CssClass' => $css_class,
                            'ErrorLog.DateTime' => SucuriScan::datetime($log->timestamp),
                            'ErrorLog.ErrorType' => $log->error_type,
                            'ErrorLog.ErrorCode' => $log->error_code,
                            'ErrorLog.ErrorAbbr' => strtoupper(substr($log->error_code, 0, 1)),
                            'ErrorLog.ErrorMessage' => $log->error_message,
                            'ErrorLog.FilePath' => $log->file_path,
                            'ErrorLog.LineNumber' => $log->line_number,
                        )
                    );
                    $counter++;
                }
            }
        }

        if (empty($response)) {
            $response = '<tr><td colspan="5">List is empty.</td></tr>';
        }

        print($response);
        exit(0);
    }
}

/**
 * Gather information from the server, database engine, and PHP interpreter.
 *
 * @return array A list of pseudo-variables and values that will replace them in the HTML template.
 */
function sucuriscan_server_info()
{
    global $wpdb;

    $params = array(
        'ServerInfo.Variables' => '',
    );

    $info_vars = array(
        'Plugin_version' => SUCURISCAN_VERSION,
        'Plugin_checksum' => SUCURISCAN_PLUGIN_CHECKSUM,
        'Last_filesystem_scan' => SucuriScanFSScanner::get_filesystem_runtime(true),
        'Datetime_and_Timezone' => '',
        'Operating_system' => sprintf('%s (%d Bit)', PHP_OS, PHP_INT_SIZE * 8),
        'Server' => 'Unknown',
        'Developer_mode' => 'OFF',
        'Memory_usage' => 'N/A',
        'MySQL_version' => '0.0',
        'SQL_mode' => 'Not set',
        'PHP_version' => PHP_VERSION,
    );

    $info_vars['Datetime_and_Timezone'] = sprintf(
        '%s (GMT %s)',
        SucuriScan::current_datetime(),
        SucuriScanOption::get_option('gmt_offset')
    );

    if (defined('WP_DEBUG') && WP_DEBUG) {
        $info_vars['Developer_mode'] = 'ON';
    }

    if (function_exists('memory_get_usage')) {
        $info_vars['Memory_usage'] = round(memory_get_usage() / 1024 / 1024, 2).' MB';
    }

    if (isset($_SERVER['SERVER_SOFTWARE'])) {
        $info_vars['Server'] = $_SERVER['SERVER_SOFTWARE'];
    }

    if ($wpdb) {
        $info_vars['MySQL_version'] = $wpdb->get_var('SELECT VERSION() AS version');

        $mysql_info = $wpdb->get_results('SHOW VARIABLES LIKE "sql_mode"');
        if (is_array($mysql_info) && !empty($mysql_info[0]->Value)) {
            $info_vars['SQL_mode'] = $mysql_info[0]->Value;
        }
    }

    $field_names = array(
        'safe_mode',
        'expose_php',
        'allow_url_fopen',
        'memory_limit',
        'upload_max_filesize',
        'post_max_size',
        'max_execution_time',
        'max_input_time',
    );

    foreach ($field_names as $php_flag) {
        $php_flag_value = SucuriScan::ini_get($php_flag);
        $php_flag_name = 'PHP_' . $php_flag;
        $info_vars[$php_flag_name] = $php_flag_value ? $php_flag_value : 'N/A';
    }

    $counter = 0;

    foreach ($info_vars as $var_name => $var_value) {
        $css_class = ($counter % 2 === 0) ? '' : 'alternate';
        $var_name = str_replace('_', "\x20", $var_name);

        $params['ServerInfo.Variables'] .= SucuriScanTemplate::getSnippet(
            'infosys-serverinfo',
            array(
                'ServerInfo.CssClass' => $css_class,
                'ServerInfo.Title' => $var_name,
                'ServerInfo.Value' => $var_value,
            )
        );
        $counter += 1;
    }

    return SucuriScanTemplate::getSection('infosys-serverinfo', $params);
}

